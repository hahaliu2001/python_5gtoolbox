# -*- coding:utf-8 -*-
import numpy as np
import math

def gen_lowPAPR_seq(u,v,alpha,MZC):
    """ following to 38.211 5.2.2 Low-PAPR sequence generation
    to generate low-PAPR sequence
    input:
        u: group number from 0 to 29
        v: base sequence number within the group, from 0 to 1
        alpha: cyclic shift
        MZC: sequence length
    output:
        sequence: MZC size of low PAPR sequence
    """
    #check input parameter
    assert u in range(30)
    assert MZC % 6 == 0
    
    if (MZC >=6) and (MZC <= 60):
        assert v == 0
    elif MZC >=72:
        assert v in [0,1]
    
    if MZC in [6,12,18,24]:
        phitable = _get_phitable(MZC)
        phivalue = np.array(phitable[u])
        baseSeq = np.exp(1j*phivalue*np.pi/4)
    elif MZC == 30:
        baseSeq = np.exp(-1j*np.pi*(u+1)*np.arange(1,MZC+1)*np.arange(2,MZC+2)/31)
    else:
        NZC = _find_largest_prime(MZC)
        q_bar = NZC*(u+1)/31
        q = math.floor(q_bar+1/2)+v*((-1)**math.floor(2*q_bar))
        xq = np.exp(-1j*np.pi*q*np.arange(NZC)*np.arange(1,NZC+1)/NZC)
        repititions = math.ceil(MZC/NZC)
        extended = np.tile(xq,repititions)
        baseSeq = extended[0:MZC]

    #get ruv
    ruv = np.exp(1j*alpha*np.arange(MZC)) * baseSeq
    return ruv


def _find_largest_prime(MZC):
    """ find largest prime number NZC such that NZC < MZC
    """
    NZC = MZC - 1
    while True:
        done = 1
        for x in range(2,int(math.sqrt(NZC)+1)):
            if NZC % x == 0:
                NZC -= 1
                done = 0
                continue
        if done == 1:
        	return NZC
            

def _get_phitable(MZC):
    """ refer to 38.211 Tables 5.2.2.2-1 to 5.2.2.2-4.
    get phi table based on MZC
    """
    phitable_6 = [
		[-3,-1,3,3,-1,-3,],
		[-3,3,-1,-1,3,-3,],
		[-3,-3,-3,3,1,-3,],
		[1,1,1,3,-1,-3,],
		[1,1,1,-3,-1,3,],
		[-3,1,-1,-3,-3,-3,],
		[-3,1,3,-3,-3,-3,],
		[-3,-1,1,-3,1,-1,],
		[-3,-1,-3,1,-3,-3,],
		[-3,-3,1,-3,3,-3,],
		[-3,1,3,1,-3,-3,],
		[-3,-1,-3,1,1,-3,],
		[1,1,3,-1,-3,3,],
		[1,1,3,3,-1,3,],
		[1,1,1,-3,3,-1,],
		[1,1,1,-1,3,-3,],
		[-3,-1,-1,-1,3,-1,],
		[-3,-3,-1,1,-1,-3,],
		[-3,-3,-3,1,-3,-1,],
		[-3,1,1,-3,-1,-3,],
		[-3,3,-3,1,1,-3,],
		[-3,1,-3,-3,-3,-1,],
		[1,1,-3,3,1,3,],
		[1,1,-3,-3,1,-3,],
		[1,1,3,-1,3,3,],
		[1,1,-3,1,3,3,],
		[1,1,-1,-1,3,-1,],
		[1,1,-1,3,-1,-1,],
		[1,1,-1,3,-3,-1,],
		[1,1,-3,1,-1,-1,],
    ]
    phitable_12 = [
		[-3,1,-3,-3,-3,3,-3,-1,1,1,1,-3,],
		[-3,3,1,-3,1,3,-1,-1,1,3,3,3,],
		[-3,3,3,1,-3,3,-1,1,3,-3,3,-3,],
		[-3,-3,-1,3,3,3,-3,3,-3,1,-1,-3,],
		[-3,-1,-1,1,3,1,1,-1,1,-1,-3,1,],
		[-3,-3,3,1,-3,-3,-3,-1,3,-1,1,3,],
		[1,-1,3,-1,-1,-1,-3,-1,1,1,1,-3,],
		[-1,-3,3,-1,-3,-3,-3,-1,1,-1,1,-3,],
		[-3,-1,3,1,-3,-1,-3,3,1,3,3,1,],
		[-3,-1,-1,-3,-3,-1,-3,3,1,3,-1,-3,],
		[-3,3,-3,3,3,-3,-1,-1,3,3,1,-3,],
		[-3,-1,-3,-1,-1,-3,3,3,-1,-1,1,-3,],
		[-3,-1,3,-3,-3,-1,-3,1,-1,-3,3,3,],
		[-3,1,-1,-1,3,3,-3,-1,-1,-3,-1,-3,],
		[1,3,-3,1,3,3,3,1,-1,1,-1,3,],
		[-3,1,3,-1,-1,-3,-3,-1,-1,3,1,-3,],
		[-1,-1,-1,-1,1,-3,-1,3,3,-1,-3,1,],
		[-1,1,1,-1,1,3,3,-1,-1,-3,1,-3,],
		[-3,1,3,3,-1,-1,-3,3,3,-3,3,-3,],
		[-3,-3,3,-3,-1,3,3,3,-1,-3,1,-3,],
		[3,1,3,1,3,-3,-1,1,3,1,-1,-3,],
		[-3,3,1,3,-3,1,1,1,1,3,-3,3,],
		[-3,3,3,3,-1,-3,-3,-1,-3,1,3,-3,],
		[3,-1,-3,3,-3,-1,3,3,3,-3,-1,-3,],
		[-3,-1,1,-3,1,3,3,3,-1,-3,3,3,],
		[-3,3,1,-1,3,3,-3,1,-1,1,-1,1,],
		[-1,1,3,-3,1,-1,1,-1,-1,-3,1,-1,],
		[-3,-3,3,3,3,-3,-1,1,-3,3,1,-3,],
		[1,-1,3,1,1,-1,-1,-1,1,3,-3,1,],
		[-3,3,-3,3,-3,-3,3,-1,-1,1,3,-3,],
    ]
    phitable_18 = [
		[-1,3,-1,-3,3,1,-3,-1,3,-3,-1,-1,1,1,1,-1,-1,-1,],
		[3,-3,3,-1,1,3,-3,-1,-3,-3,-1,-3,3,1,-1,3,-3,3,],
		[-3,3,1,-1,-1,3,-3,-1,1,1,1,1,1,-1,3,-1,-3,-1,],
		[-3,-3,3,3,3,1,-3,1,3,3,1,-3,-3,3,-1,-3,-1,1,],
		[1,1,-1,-1,-3,-1,1,-3,-3,-3,1,-3,-1,-1,1,-1,3,1,],
		[3,-3,1,1,3,-1,1,-1,-1,-3,1,1,-1,3,3,-3,3,-1,],
		[-3,3,-1,1,3,1,-3,-1,1,1,-3,1,3,3,-1,-3,-3,-3,],
		[1,1,-3,3,3,1,3,-3,3,-1,1,1,-1,1,-3,-3,-1,3,],
		[-3,1,-3,-3,1,-3,-3,3,1,-3,-1,-3,-3,-3,-1,1,1,3,],
		[3,-1,3,1,-3,-3,-1,1,-3,-3,3,3,3,1,3,-3,3,-3,],
		[-3,-3,-3,1,-3,3,1,1,3,-3,-3,1,3,-1,3,-3,-3,3,],
		[-3,-3,3,3,3,-1,-1,-3,-1,-1,-1,3,1,-3,-3,-1,3,-1,],
		[-3,-1,-3,-3,1,1,-1,-3,-1,-3,-1,-1,3,3,-1,3,1,3,],
		[1,1,-3,-3,-3,-3,1,3,-3,3,3,1,-3,-1,3,-1,-3,1,],
		[-3,3,-1,-3,-1,-3,1,1,-3,-3,-1,-1,3,-3,1,3,1,1,],
		[3,1,-3,1,-3,3,3,-1,-3,-3,-1,-3,-3,3,-3,-1,1,3,],
		[-3,-1,-3,-1,-3,1,3,-3,-1,3,3,3,1,-1,-3,3,-1,-3,],
		[-3,-1,3,3,-1,3,-1,-3,-1,1,-1,-3,-1,-1,-1,3,3,1,],
		[-3,1,-3,-1,-1,3,1,-3,-3,-3,-1,-3,-3,1,1,1,-1,-1,],
		[3,3,3,-3,-1,-3,-1,3,-1,1,-1,-3,1,-3,-3,-1,3,3,],
		[-3,1,1,-3,1,1,3,-3,-1,-3,-1,3,-3,3,-1,-1,-1,-3,],
		[1,-3,-1,-3,3,3,-1,-3,1,-3,-3,-1,-3,-1,1,3,3,3,],
		[-3,-3,1,-1,-1,1,1,-3,-1,3,3,3,3,-1,3,1,3,1,],
		[3,-1,-3,1,-3,-3,-3,3,3,-1,1,-3,-1,3,1,1,3,3,],
		[3,-1,-1,1,-3,-1,-3,-1,-3,-3,-1,-3,1,1,1,-3,-3,3,],
		[-3,-3,1,-3,3,3,3,-1,3,1,1,-3,-3,-3,3,-3,-1,-1,],
		[-3,-1,-1,-3,1,-3,3,-1,-1,-3,3,3,-3,-1,3,-1,-1,-1,],
		[-3,-3,3,3,-3,1,3,-1,-3,1,-1,-3,3,-3,-1,-1,-1,3,],
		[-1,-3,1,-3,-3,-3,1,1,3,3,-3,3,3,-3,-1,3,-3,1,],
		[-3,3,1,-1,-1,-1,-1,1,-1,3,3,-3,-1,1,3,-1,3,-1,],        
    ]
    phitable_24 = [
		[-1,-3,3,-1,3,1,3,-1,1,-3,-1,-3,-1,1,3,-3,-1,-3,3,3,3,-3,-3,-3,],
		[-1,-3,3,1,1,-3,1,-3,-3,1,-3,-1,-1,3,-3,3,3,3,-3,1,3,3,-3,-3,],
		[-1,-3,-3,1,-1,-1,-3,1,3,-1,-3,-1,-1,-3,1,1,3,1,-3,-1,-1,3,-3,-3,],
		[1,-3,3,-1,-3,-1,3,3,1,-1,1,1,3,-3,-1,-3,-3,-3,-1,3,-3,-1,-3,-3,],
		[-1,3,-3,-3,-1,3,-1,-1,1,3,1,3,-1,-1,-3,1,3,1,-1,-3,1,-1,-3,-3,],
		[-3,-1,1,-3,-3,1,1,-3,3,-1,-1,-3,1,3,1,-1,-3,-1,-3,1,-3,-3,-3,-3,],
		[-3,3,1,3,-1,1,-3,1,-3,1,-1,-3,-1,-3,-3,-3,-3,-1,-1,-1,1,1,-3,-3,],
		[-3,1,3,-1,1,-1,3,-3,3,-1,-3,-1,-3,3,-1,-1,-1,-3,-1,-1,-3,3,3,-3,],
		[-3,1,-3,3,-1,-1,-1,-3,3,1,-1,-3,-1,1,3,-1,1,-1,1,-3,-3,-3,-3,-3,],
		[1,1,-1,-3,-1,1,1,-3,1,-1,1,-3,3,-3,-3,3,-1,-3,1,3,-3,1,-3,-3,],
		[-3,-3,-3,-1,3,-3,3,1,3,1,-3,-1,-1,-3,1,1,3,1,-1,-3,3,1,3,-3,],
		[-3,3,-1,3,1,-1,-1,-1,3,3,1,1,1,3,3,1,-3,-3,-1,1,-3,1,3,-3,],
		[3,-3,3,-1,-3,1,3,1,-1,-1,-3,-1,3,-3,3,-1,-1,3,3,-3,-3,3,-3,-3,],
		[-3,3,-1,3,-1,3,3,1,1,-3,1,3,-3,3,-3,-3,-1,1,3,-3,-1,-1,-3,-3,],
		[-3,1,-3,-1,-1,3,1,3,-3,1,-1,3,3,-1,-3,3,-3,-1,-1,-3,-3,-3,3,-3,],
		[-3,-1,-1,-3,1,-3,-3,-1,-1,3,-1,1,-1,3,1,-3,-1,3,1,1,-1,-1,-3,-3,],
		[-3,-3,1,-1,3,3,-3,-1,1,-1,-1,1,1,-1,-1,3,-3,1,-3,1,-1,-1,-1,-3,],
		[3,-1,3,-1,1,-3,1,1,-3,-3,3,-3,-1,-1,-1,-1,-1,-3,-3,-1,1,1,-3,-3,],
		[-3,1,-3,1,-3,-3,1,-3,1,-3,-3,-3,-3,-3,1,-3,-3,1,1,-3,1,1,-3,-3,],
		[-3,-3,3,3,1,-1,-1,-1,1,-3,-1,1,-1,3,-3,-1,-3,-1,-1,1,-3,3,-1,-3,],
		[-3,-3,-1,-1,-1,-3,1,-1,-3,-1,3,-3,1,-3,3,-3,3,3,1,-1,-1,1,-3,-3,],
		[3,-1,1,-1,3,-3,1,1,3,-1,-3,3,1,-3,3,-1,-1,-1,-1,1,-3,-3,-3,-3,],
		[-3,1,-3,3,-3,1,-3,3,1,-1,-3,-1,-3,-3,-3,-3,1,3,-1,1,3,3,3,-3,],
		[-3,-1,1,-3,-1,-1,1,1,1,3,3,-1,1,-1,1,-1,-1,-3,-3,-3,3,1,-1,-3,],
		[-3,3,-1,-3,-1,-1,-1,3,-1,-1,3,-3,-1,3,-3,3,-3,-1,3,1,1,-1,-3,-3,],
		[-3,1,-1,-3,-3,-1,1,-3,-1,-3,1,1,-1,1,1,3,3,3,-1,1,-1,1,-1,-3,],
		[-1,3,-1,-1,3,3,-1,-1,-1,3,-1,-3,1,3,1,1,-3,-3,-3,-1,-3,-1,-3,-3,],
		[3,-3,-3,-1,3,3,-3,-1,3,1,1,1,3,-1,3,-3,-1,3,-1,3,1,-1,-3,-3,],
		[-3,1,-3,1,-3,1,1,3,1,-3,-3,-1,1,3,-1,-3,3,1,-1,-3,-3,-3,-3,-3,],
		[3,-3,-1,1,3,-1,-1,-3,-1,3,-1,-3,-1,-3,3,-1,3,1,1,-3,3,-3,-3,-3,],        
    ]
    if MZC == 6:
        phitable = phitable_6
    elif MZC == 12:
        phitable = phitable_12
    elif MZC == 18:
        phitable = phitable_18
    else:
        phitable = phitable_24
    return phitable

if __name__ == "__main__":
    from scipy import io
    import os
    
    print("test low PAPR seq")
    from tests.common import test_lowPAPR_seq
    file_lists = test_lowPAPR_seq.get_testvectors()
    count = 1
    for filename in file_lists:
        print("count= {}, filename= {}".format(count, filename))
        count += 1
        test_lowPAPR_seq.test_lowPAPR_seq(filename)
